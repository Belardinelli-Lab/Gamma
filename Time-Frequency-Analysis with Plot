%% 4: Time-Frequency-Analysis
    postica_dir = fullfile(putstuff, 'PostICA');                                             % closing matlab or losing your workspace
    file_list = dir(fullfile(postica_dir, '*.mat'));                                         % Get a list of all .mat files
    
    % Ensure output dir exists
    TFR_dir = fullfile(putstuff, 'TFR', (sub));
    if ~exist(TFR_dir, 'dir')
        mkdir(TFR_dir);
    end
    
    % Get list of TFR files (already processed)
    existing_TFR = dir(fullfile(putstuff, 'TFR', (sub), '*_TFR.mat'));
    existing_names = erase({existing_TFR.name}, '_TFR.mat');
     
    for file_idx = 1:length(file_list)
    
        [~, base_name, ~] = fileparts(file_list(file_idx).name); % e.g., 'IT001-001_postica'
        dataset_id = erase(base_name, '_postica');               % e.g., 'IT001-001'
    
        % Check if this dataset has already been processed
        if any(strcmp(existing_names, dataset_id))
            fprintf('Skipping already processed file: %s\n', base_name);
            continue;
        end
    
        % Load cleaned data
        postica_file = fullfile(postica_dir, [base_name, '.mat']);
        if ~isfile(postica_file)
            fprintf('PostICA file not found for %s. Skipping.\n', base_name);
            continue;
        end

        load(postica_file, 'data_postica');          
        fprintf('Processing file (TFR): %s\n', base_name)                                                    % Debugging output        
            


            %%% TIME-FREQUENCY-ANALYSIS STEPS:

            %Filtering
            cfg = [];
            cfg.channel         = (1:64);
            cfg.detrend         = 'yes';
            cfg.demean          = 'yes';
            cfg.dftfilter   = 'yes';
            cfg.dftfreq     = 50;
            cfg.dftreplace  = 'neighbour';
            cfg.baseline        = [-1 -0.05];
            data_preproc2       = ft_preprocessing(cfg,data_postica);
                 
            % TFR
            cfg                 = [];
            % cfg.keeptrials      = 'yes';
            cfg.output          = 'pow';
            cfg.method          = 'mtmconvol';
            cfg.taper           = 'hanning';
            cfg.tapsmofrq       =   15;
            cfg.channel         = {'O1', 'O2', 'Oz', 'POz', 'PO3', 'PO4', 'PO8', 'PO7'};
            cfg.foi             = 38:1:72;                                                                      % set frequencies of interest
            cfg.toi             = -1:0.05:3;                                                                    % set timepoints of interest
            cfg.t_ftimwin       = 0.45 * ones(length(cfg.foi), 1);                                              % set time window for TFR analysis: constant length of 200ms
            cfg.pad             = 5;                                                                            % pad trials to integer number of seconds, this speeds up the 
            freq_stim_bl           = ft_freqanalysis(cfg, data_preproc2);      



        % Save the cleaned data
        name = strrep(base_name, 'postica', 'TFR');                                                                % Replace 'postica' with 'TFR' in filename  
        save(fullfile(TFR_dir, name), 'freq_stim_bl');                                                             % to prevent filenames from getting too long
                                                                                                                
    end



%% 4.1: Baseline Correction
        putstuff = 'D:\Users\melis\Documents\SANIONA\Cohort1-2\cohort2';
        root_dir = 'D:\Users\melis\Documents\SANIONA\Cohort1-2\cohort2\TFR';
        TFR_dir = dir(fullfile(root_dir, 'IT*'));
           
        % Ensure output dir exists
        BL_dir = fullfile(putstuff, 'BaselineCorrected');
        if ~exist(BL_dir, 'dir')
            mkdir(BL_dir);
        end
        
        % Get list of TFR files (already processed)
        existing_BL = dir(fullfile(putstuff, 'BaselineCorrected', '*_BL.mat'));
        existing_names = erase({existing_BL.name}, '_BL.mat');
         
        for p = 1:length(TFR_dir)
            participant_path = fullfile(root_dir, TFR_dir(p).name);
            all_files = dir(fullfile(participant_path, '*_TFR.mat'));
            
            for f = 1: length(all_files)
            [~, base_name, ~] = fileparts(all_files(f).name); % e.g., 'IT001-001_postica'
            dataset_id = erase(base_name, '_TFR');               % e.g., 'IT001-001'
        
                % Check if this dataset has already been processed
                if any(strcmp(existing_names, dataset_id))
                    fprintf('Skipping already processed file: %s\n', base_name);
                    continue;
                end
            
                % Load TFR data
                TFR_file = fullfile(participant_path, [base_name, '.mat']);
                if ~isfile(TFR_file)
                    fprintf('TFR file not found for %s. Skipping.\n', base_name);
                    continue;
                end
        
                load(TFR_file, 'freq_stim');          
                fprintf('Processing file (Baseline Correction): %s\n', base_name)                                                    % Debugging output        



                    %%% Baseline Correction
                    cfg = [];
                    cfg.baseline     = [-0.5 -0.1];
                    cfg.baselinetype = 'relative';  % or 'absolute', 'db'
                    freq_stim_bl = ft_freqbaseline(cfg, freq_stim);



                % Save
                BL_dir = fullfile(putstuff, 'BaselineCorrected', TFR_dir(p).name);
                if ~exist(BL_dir, 'dir'), mkdir(BL_dir); end
                name = strrep(base_name, 'TFR', 'BL');                                                                                % Replace 'postica' with 'TFR' in filename  
                save(fullfile(BL_dir, name), 'freq_stim_bl');
            end
        end


 %% 4.3: Automatized Plot BL with configurable scaling mode
    % Per-participant unified z-limits from 0.25–0.75 s and 38–72 Hz only
    % Uses freq_stim_bl structures and *_BL.mat files
    clear all
    root_dir = 'D:\Users\melis\Documents\SANIONA\Cohort1-2\cohort2\BaselineCorrected';
    participant_dirs = dir(fullfile(root_dir, 'IT*'));
    
    % --- Constants ---
    zmax_time_window = [0.25 0.75];      % drives z-scaling comparability
    zmax_freq_band   = [38 72];          % align zmax band to plotted band
    plot_xlim        = [-0.1 0.75];
    plot_freq_ylim   = [38 72];
    want_channels    = {'O1','Oz','O2'};
    
    % --- Scaling mode ---
    % 'strict'   = [min(all mins), min(all maxs)] → weakest condition drives scaling (min of mins / min of maxs)
    % 'balanced' = [prctile(mins,75), prctile(maxs,25)] → percentile-based (75th percentile of minima, 25th percentile of maxima).
    % 'full'     = [min(all mins), max(all maxs)] → full dynamic range across all files (min of mins / max of maxs).
    scaling_mode = 'balanced';
    
    z_lim_map = containers.Map();
    
    

    % STEP 1: Compute per-participant z-limits
    for p = 1:numel(participant_dirs)
        pid = participant_dirs(p).name;
        participant_path = fullfile(root_dir, pid);
        files = dir(fullfile(participant_path, '*_BL.mat'));
        if isempty(files)
            fprintf('No BL files found for %s\n', pid);
            continue;
        end
    
        zmin_vals = [];
        zmax_vals = [];
        for f = 1:numel(files)
            fpath = fullfile(participant_path, files(f).name);
            try
                S = load(fpath, 'freq_stim_bl');
                if ~isfield(S, 'freq_stim_bl')
                    warning('No freq_stim_bl in %s; skipping.', files(f).name);
                    continue;
                end
                freq_stim_bl = S.freq_stim_bl;
    
                % Time and frequency restriction
                t = freq_stim_bl.time;
                tidx = (t >= zmax_time_window(1)) & (t <= zmax_time_window(2));
                fqs = freq_stim_bl.freq;
                fidx = (fqs >= zmax_freq_band(1)) & (fqs <= zmax_freq_band(2));
                if ~any(tidx) || ~any(fidx)
                    continue;
                end
    
                % Subset and average
                data = freq_stim_bl.powspctrm(:,:,fidx,tidx);
                pow_vec = squeeze(mean(mean(mean(data,1),2),4));  % [freq x 1]
    
                if ~isempty(pow_vec)
                    zmin_vals(end+1) = min(pow_vec); 
                    zmax_vals(end+1) = max(pow_vec); 
                end
            catch ME
                warning('Skipping %s (%s)', files(f).name, ME.message);
            end
        end
    
        if isempty(zmin_vals) || isempty(zmax_vals)
            warning('No valid values for %s; plots will use FieldTrip defaults.', pid);
            continue;
        end
    
        % Apply scaling strategy
        switch scaling_mode
            case 'strict'
                zmin = min(zmin_vals);
                zmax = min(zmax_vals);
            case 'balanced'
                zmin = prctile(zmin_vals, 5);
                zmax = prctile(zmax_vals, 40);
            case 'full'
                zmin = min(zmin_vals);
                zmax = max(zmax_vals);
            otherwise
                error('Unknown scaling_mode: %s', scaling_mode);
        end
    
        % Ensure valid z-limits
        if zmin >= zmax
            warning('Invalid zlim computed for %s; using defaults.', pid);
        else
            z_lim_map(pid) = [zmin zmax];
        end
    end



    % STEP 2: Plot each file using the participant-specific z-limits
    for p = 1:numel(participant_dirs)
        pid = participant_dirs(p).name;
        participant_path = fullfile(root_dir, pid);
        files = dir(fullfile(participant_path, '*_BL.mat'));
        if isempty(files), continue; end
    
        out_dir = fullfile(participant_path, 'Figures');
        if ~exist(out_dir, 'dir'), mkdir(out_dir); end
    
        for f = 1:numel(files)
            fpath = fullfile(participant_path, files(f).name);
            base_name = erase(files(f).name, '.mat');
            try
                S = load(fpath, 'freq_stim_bl');
                if ~isfield(S, 'freq_stim_bl')
                    warning('No freq_stim_bl in %s; skipping plot.', files(f).name);
                    continue;
                end
                freq_stim_bl = S.freq_stim_bl;
    
                % Channel handling robust to missing occipital labels
                availCh = intersect(want_channels, freq_stim_bl.label, 'stable');
                if isempty(availCh)
                    tmp = freq_stim_bl;
                    tmp.powspctrm = mean(tmp.powspctrm, 2);
                    tmp.label = {'avgChan'};
                    data_for_plot = tmp;
                    plot_channels = tmp.label;
                else
                    data_for_plot = freq_stim_bl;
                    plot_channels = availCh;
                end
    
                % --- Plot config ---
                cfg = [];
                cfg.baseline     = [-0.5 -0.1];
                cfg.baselinetype = 'relative';
                cfg.xlim         = plot_xlim;
                cfg.ylim         = plot_freq_ylim;
                cfg.channel      = plot_channels;
                cfg.colorbar     = 'yes';
                cfg.colorbartext    = 'Power (db)';
                if isKey(z_lim_map, pid)
                    cfg.zlim = z_lim_map(pid);
                end
    
                fig = figure('Name', sprintf('%s - %s', pid, base_name), 'NumberTitle', 'off');
                ft_singleplotTFR(cfg, data_for_plot);
    
                % Vertical dashed line at x=0
                hold on; yl = ylim; plot([0 0], yl, 'k--', 'LineWidth', 1); hold off;
                xlabel('Time (s)');
                ylabel('Frequency (Hz)');
    
                % Title formatting
                title_str = compose_title(pid, base_name);
                title(title_str, 'FontSize', 13);



                % Save
                savefig(fig, fullfile(out_dir, [base_name '.fig']));
                exportgraphics(fig, fullfile(out_dir, [base_name '.png']), 'Resolution', 300);
                fprintf('Saved %s | %s | zlim=[%.2f %.2f]\n', pid, base_name, cfg.zlim(1), cfg.zlim(2));
                close(fig);
            catch ME
                warning('Failed plotting %s (%s)', files(f).name, ME.message);
            end
        end
    end



    % Helpers
    function s = compose_title(pid, base_name)
        tokens_day  = regexp(base_name, '(RUNIN|DAY3|DAY9)', 'match', 'ignorecase');
        tokens_cond = regexp(base_name, '(PRE|T1|T2)', 'match', 'ignorecase');
        parts = [upper_tokens(tokens_day), upper_tokens(tokens_cond)];
        if isempty(parts)
            s = sprintf('%s %s', pid, strrep(base_name, '_', ' '));
        else
            s = sprintf('%s %s', pid, strjoin(parts, ' '));
        end
    end
    
    function out = upper_tokens(cellstr_in)
        if isempty(cellstr_in), out = {}; return; end
        out = upper(cellstr_in(:)');
    end



   %% 4.3: Sanity Check
                
                %%% PLOT single subject to check if the loop made no mistake when in doubt
                
                cfg                 = [];
                cfg.layout          = 'easycapM1.mat';
                layout.label        = freq_stim.label;
                %layout.pos         = 'standard_1020.elc';
                layout              = ft_prepare_layout(cfg);
                
                % % Plot
                % cfg = [];
                % cfg.baseline        = [-1 0]; 
                % cfg.baselinetype    = 'relative';
                % %cfg.zlim           = [-3e-27 3e-27];
                % cfg.xlim            = [0 3];
                % cfg.ylim            = [30 80]; 
                % cfg.showlabels      = 'yes';	
                % cfg.layout          = layout;
                % cfg.colorbar        = 'yes';
                % %ft_topoplotTFR(cfg, freq_stim);
                % ft_multiplotTFR(cfg, freq_stim);% Unique figure for each file
                % %ft_singleplotTFR(cfg, freq_stim)
                % title(strrep(base_name, '_', ' '))
                
                % Plot
                cfg = [];
                cfg.baseline        = [-0.5 -0.1]; 
                cfg.baselinetype    = 'relative';
                % cfg.zlim          = [0 2];
                % cfg.zlim          = zlim;
                cfg.xlim            = [-0.1 0.75];
                cfg.ylim            = [38 72]; 
                cfg.showlabels      = 'yes';
        	      cfg.layout          = layout;
                cfg.colorbar        = 'yes';
                cfg.colorbartext    = 'Power (db)';
                cfg.channel         = {'O1', 'Oz', 'O2'}';
                cfg.title           =  'Relative Change from Baseline';
                %ft_topoplotTFR(cfg, freq_stim);
                %ft_multiplotTFR(cfg, freq_stim);% Unique figure for each file
                ft_singleplotTFR(cfg, freq_stim)
                % Overlay vertical dotted line at x=0
                hold on
                yl = ylim;  % current y-axis limits
                plot([0 0], yl, 'k--', 'LineWidth', 1)  % vertical black dashed line
                hold off
                xlabel('Time (s)');
                ylabel('Frequency (Hz)');
