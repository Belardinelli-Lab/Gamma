%% 4: Time-Frequency Analysis
    data_root = fullfile(putstuff, 'PostICA');
    
    % --- Ask user if they want to process all or one subject ---
    mode_choice = input('Run for (1) Single subject or (2) All IT* subjects? Enter 1 or 2: ');
    
    if mode_choice == 1
        % === SINGLE SUBJECT MODE ===
        sub = input('Enter subject ID (e.g., ''IT001-001''): ', 's');
        subj_list = {sub};
    elseif mode_choice == 2
        % === AUTO MODE ===
        subj_dirs = dir(fullfile(data_root, 'IT*'));
        subj_dirs = subj_dirs([subj_dirs.isdir]);
        subj_list = {subj_dirs.name};
    else
        error('Invalid selection. Choose 1 (single subject) or 2 (all subjects).');
    end
    
    % --- Loop through all selected subjects ---
    for s = 1:numel(subj_list)
        sub = subj_list{s};
        fprintf('\n=== Processing subject: %s ===\n', sub);
    
        % Directories
        postica_dir = fullfile(putstuff, 'PostICA', sub);
        if ~isfolder(postica_dir)
            warning('PostICA folder not found for %s. Skipping.', sub);
            continue;
        end
    
        % Ensure output dir exists
        TFR_dir = fullfile(putstuff, 'TFR', sub);
        if ~exist(TFR_dir, 'dir')
            mkdir(TFR_dir);
        end
    
        % Check which files already exist
        existing_TFR = dir(fullfile(TFR_dir, '*_TFR.mat'));
        existing_names = erase({existing_TFR.name}, '_TFR.mat');
    
        % Get list of available files
        file_list = dir(fullfile(postica_dir, '*.mat'));
        if isempty(file_list)
            warning('No .mat files found in %s.', postica_dir);
            continue;
        end
    
        % --- Loop through each PostICA dataset ---
        for file_idx = 1:numel(file_list)
            [~, base_name, ~] = fileparts(file_list(file_idx).name);
            dataset_id = erase(base_name, '_postica');
    
            % Skip if already processed
            if any(strcmp(existing_names, dataset_id))
                fprintf('Skipping already processed file: %s\n', base_name);
                continue;
            end
    
            % Load data
            postica_file = fullfile(postica_dir, [base_name, '.mat']);
            if ~isfile(postica_file)
                warning('PostICA file not found: %s', base_name);
                continue;
            end
    
            load(postica_file, 'data_postica');
    
            % Print formatted banner
            banner_line = repmat('=', 1, max(70, length(base_name) + 25));
            fprintf(2, '\n%s\n', banner_line); % Bold magenta (stdout=2 for color)
            fprintf(2, 'Processing file (TFR): %s\n', base_name);
            fprintf(2, '%s\n\n', banner_line);
    
            % --- TIME-FREQUENCY ANALYSIS STEPS ---
    
            % Step 1: Filtering / preprocessing
            cfg = [];
            cfg.channel     = 1:64;
            cfg.detrend     = 'yes';
            cfg.demean      = 'yes';
            cfg.dftfilter   = 'yes';
            cfg.dftfreq     = 50;
            cfg.dftreplace  = 'neighbour';
            cfg.baseline    = [-1 -0.1];
            data_preproc2   = ft_preprocessing(cfg, data_postica);
    
            % Step 2: Time-Frequency decomposition
            cfg = [];
            cfg.output      = 'pow';
            cfg.method      = 'mtmconvol';
            cfg.taper       = 'hanning';
            cfg.tapsmofrq   = 15;
            % cfg.channel         = {'O1', 'O2', 'Oz', 'POz', 'PO3', 'PO4', 'PO8', 'PO7'};
            cfg.channel     = 'all';
            cfg.foi         = 38:1:72;       % frequencies of interest
            cfg.toi         = -1:0.05:1.25;  % timepoints of interest
            cfg.t_ftimwin   = 0.45 * ones(length(cfg.foi), 1);
            cfg.pad         = 5;
            freq_stim       = ft_freqanalysis(cfg, data_preproc2);
    
            % Baseline Correction
            cfg = [];
            cfg.baseline     = [-0.5 -0.1];
            cfg.baselinetype = 'relative';                                                              % or 'absolute', 'db'
            freq_stim_bl = ft_freqbaseline(cfg, freq_stim);
    
            % Step 3: Save result
            name = strrep(base_name, 'postica', 'TFR');
            save(fullfile(TFR_dir, name), 'freq_stim_bl', '-v7.3');
    
            fprintf('✅ Saved: %s\n', fullfile(TFR_dir, name));
        end
    end

    %% 4.1: Automatized TFR Single-Plot with configurable scaling mode
    % Per-participant unified z-limits from 0.25–0.75 s and 38–72 Hz only
    % Uses freq_stim_bl structures and *_BL.mat files
    clear all
    root_dir = 'D:\Users\melis\Documents\SANIONA\Cohort3\TFR';
    participant_dirs = dir(fullfile(root_dir, 'IT001-028*'));
    
    % --- Constants ---
    zmax_time_window = [0.25 0.75];      % drives z-scaling comparability
    zmax_freq_band   = [38 72];          % align zmax band to plotted band
    plot_xlim        = [-0.1 0.75];
    plot_freq_ylim   = [38 72];
    want_channels    = {'O1', 'O2', 'Oz', 'POz', 'PO3', 'PO4', 'PO8', 'PO7'};
    
    % --- Scaling mode ---
    % 'strict'   = [min(all mins), min(all maxs)] → weakest condition drives scaling (min of mins / min of maxs)
    % 'balanced' = [prctile(mins,75), prctile(maxs,25)] → percentile-based (75th percentile of minima, 25th percentile of maxima).
    % 'full'     = [min(all mins), max(all maxs)] → full dynamic range across all files (min of mins / max of maxs).
    scaling_mode = 'balanced';
    
    z_lim_map = containers.Map();
    
    %%% STEP 1: Compute per-participant z-limits
    for p = 1:numel(participant_dirs)
        pid = participant_dirs(p).name;
        participant_path = fullfile(root_dir, pid);
        files = dir(fullfile(participant_path, '*_TFR.mat'));
        if isempty(files)
            fprintf('No BL files found for %s\n', pid);
            continue;
        end
    
        zmin_vals = [];
        zmax_vals = [];
        for f = 1:numel(files)
            fpath = fullfile(participant_path, files(f).name);
            try
                S = load(fpath, 'freq_stim_bl');
                if ~isfield(S, 'freq_stim_bl')
                    warning('No freq_stim_bl in %s; skipping.', files(f).name);
                    continue;
                end
                freq_stim_bl = S.freq_stim_bl;
    
                % Time and frequency restriction
                t = freq_stim_bl.time;
                tidx = (t >= zmax_time_window(1)) & (t <= zmax_time_window(2));
                fqs = freq_stim_bl.freq;
                fidx = (fqs >= zmax_freq_band(1)) & (fqs <= zmax_freq_band(2));
                if ~any(tidx) || ~any(fidx)
                    continue;
                end
    
                % Subset and average
                data = freq_stim_bl.powspctrm(:,:,fidx,tidx);
                pow_vec = squeeze(mean(mean(mean(data,1),2),4));  % [freq x 1]
    
                if ~isempty(pow_vec)
                    zmin_vals(end+1) = min(pow_vec); 
                    zmax_vals(end+1) = max(pow_vec); 
                end
            catch ME
                warning('Skipping %s (%s)', files(f).name, ME.message);
            end
        end
    
        if isempty(zmin_vals) || isempty(zmax_vals)
            warning('No valid values for %s; plots will use FieldTrip defaults.', pid);
            continue;
        end
    
        % Apply scaling strategy
        switch scaling_mode
            case 'strict'
                zmin = min(zmin_vals);
                zmax = min(zmax_vals);
            case 'balanced'
                zmin = prctile(zmin_vals, 5);
                zmax = prctile(zmax_vals, 40);
            case 'full'
                zmin = min(zmin_vals);
                zmax = max(zmax_vals);
            otherwise
                error('Unknown scaling_mode: %s', scaling_mode);
        end
    
        % Ensure valid z-limits
        if zmin >= zmax
            warning('Invalid zlim computed for %s; using defaults.', pid);
        else
            z_lim_map(pid) = [zmin zmax];
        end
    end
    
    %%% STEP 2: Plot each file using the participant-specific z-limits
    for p = 1:numel(participant_dirs)
        pid = participant_dirs(p).name;
        participant_path = fullfile(root_dir, pid);
        files = dir(fullfile(participant_path, '*_BL.mat'));
        if isempty(files), continue; end
    
        out_dir = fullfile(participant_path, 'Figures');
        if ~exist(out_dir, 'dir'), mkdir(out_dir); end
    
        for f = 1:numel(files)
            fpath = fullfile(participant_path, files(f).name);
            base_name = erase(files(f).name, '.mat');
            try
                S = load(fpath, 'freq_stim_bl');
                if ~isfield(S, 'freq_stim_bl')
                    warning('No freq_stim_bl in %s; skipping plot.', files(f).name);
                    continue;
                end
                freq_stim_bl = S.freq_stim_bl;
    
                % Channel handling robust to missing occipital labels
                availCh = intersect(want_channels, freq_stim_bl.label, 'stable');
                if isempty(availCh)
                    tmp = freq_stim_bl;
                    tmp.powspctrm = mean(tmp.powspctrm, 2);
                    tmp.label = {'avgChan'};
                    data_for_plot = tmp;
                    plot_channels = tmp.label;
                else
                    data_for_plot = freq_stim_bl;
                    plot_channels = availCh;
                end
    
                % --- Plot config ---
                cfg = [];
                cfg.baseline     = [-0.5 -0.1];
                cfg.baselinetype = 'relative';
                cfg.xlim         = plot_xlim;
                cfg.ylim         = plot_freq_ylim;
                cfg.channel      = plot_channels;
                cfg.colorbar     = 'yes';
                cfg.colorbartext    = 'Power (db)';
                if isKey(z_lim_map, pid)
                    cfg.zlim = z_lim_map(pid);
                end
    
                fig = figure('Name', sprintf('%s - %s', pid, base_name), 'NumberTitle', 'off');
                ft_singleplotTFR(cfg, data_for_plot);
    
                % Vertical dashed line at x=0
                hold on; yl = ylim; plot([0 0], yl, 'k--', 'LineWidth', 1); hold off;
                xlabel('Time (s)');
                ylabel('Frequency (Hz)');
    
                % Title formatting
                title_str = compose_title(pid, base_name);
                title(title_str, 'FontSize', 13);
    
                % Save
                savefig(fig, fullfile(out_dir, [base_name '.fig']));
                exportgraphics(fig, fullfile(out_dir, [base_name '.png']), 'Resolution', 300);
                fprintf('Saved %s | %s | zlim=[%.2f %.2f]\n', pid, base_name, cfg.zlim(1), cfg.zlim(2));
                close(fig);
            catch ME
                warning('Failed plotting %s (%s)', files(f).name, ME.message);
            end
        end
    end
    
    %%% Helpers
    function s = compose_title(pid, base_name)
        %tokens_day  = regexp(base_name, '(RUNIN|DAY3|DAY9)', 'match', 'ignorecase');                           % Default 
        tokens_day  = regexp(base_name, '(RUNIN|DAY3|DAY8)', 'match', 'ignorecase');                            % In case recording happened on another day
        tokens_cond = regexp(base_name, '(PRE|T1|T2)', 'match', 'ignorecase');
        parts = [upper_tokens(tokens_day), upper_tokens(tokens_cond)];
        if isempty(parts)
            s = sprintf('%s %s', pid, strrep(base_name, '_', ' '));
        else
            s = sprintf('%s %s', pid, strjoin(parts, ' '));
        end
    end
    
    function out = upper_tokens(cellstr_in)
        if isempty(cellstr_in), out = {}; return; end
        out = upper(cellstr_in(:)');
    end


    %% 4.2: Automatized TFR Topoplot (per participant, unified scaling)
    root_dir = 'D:\Users\melis\Documents\SANIONA\Cohort3\TFR';
participants = dir(fullfile(root_dir, 'IT*'));

for p = 1:numel(participants)
    pid = participants(p).name;
    subj_path = fullfile(root_dir, pid);
    files = dir(fullfile(subj_path, '*_TFR.mat'));
    if isempty(files), continue; end

    out_dir = fullfile(subj_path, 'TopoFigures');
    if ~exist(out_dir, 'dir'), mkdir(out_dir); end

    for f = 1:numel(files)
        fpath = fullfile(subj_path, files(f).name);
        load(fpath, 'freq_stim_bl');
        fprintf('Plotting %s\n', files(f).name);

        % average trials if necessary
        if contains(freq_stim_bl.dimord, 'rpt')
            cfg = [];
            cfg.avgoverrpt = 'yes';
            freq_stim_bl = ft_freqdescriptives(cfg, freq_stim_bl);
        end

        % plotting cfg
        cfg = [];
        cfg.layout    = 'easycapM11.mat';
        cfg.parameter = 'powspctrm';
        cfg.xlim      = [0.25 0.75];
        cfg.ylim      = [38 72];
        cfg.zlim      = 'maxmin';
        cfg.style     = 'fill';
        cfg.comment   = 'no';
        cfg.marker    = 'on';
        cfg.colorbar  = 'yes';

        % plot and save
        fig = figure('Name', sprintf('%s | %s', pid, files(f).name), 'NumberTitle', 'off');
        ft_topoplotTFR(cfg, freq_stim_bl);
        title(sprintf('%s | Gamma 38–72 Hz, 0.25–0.75 s', pid), 'FontSize', 12);
        exportgraphics(fig, fullfile(out_dir, [erase(files(f).name, '.mat') '_topo.png']), 'Resolution', 600);
        % close(fig);
    end
end
    
    %% 4.3: Sanity Check
                                                             
        %%% PLOT FREQUENCIES
        
        cfg                 = [];
        cfg.layout          = 'easycapM11.mat';
        layout.label        = freq_stim_bl.label;
        %layout.pos         = 'standard_1020.elc';
        layout              = ft_prepare_layout(cfg);
        
        % Plot
        cfg = [];
        cfg.baseline        = [-0.5 -0.1]; 
        cfg.baselinetype    = 'relative';
        % cfg.zlim = [0 2];
        % cfg.zlim           = zlim;
        cfg.xlim            = [-0.1 0.75];
        cfg.ylim            = [38 72]; 
        cfg.showlabels      = 'yes';
	    cfg.layout          = layout;
        cfg.colorbar        = 'yes';
        cfg.colorbartext    = 'Power (db)';
        cfg.channel         = {'O1', 'O2', 'Oz', 'POz', 'PO3', 'PO4', 'PO8', 'PO7'}';
        cfg.title           =  'Relative Change from Baseline';
        %ft_topoplotTFR(cfg, freq_stim);
        %ft_multiplotTFR(cfg, freq_stim);                                                               % Unique figure for each file
        ft_singleplotTFR(cfg, freq_stim_bl)
        % Overlay vertical dotted line at x=0
        hold on
        yl = ylim;                                                                                      % current y-axis limits
        plot([0 0], yl, 'k--', 'LineWidth', 1)                                                          % vertical black dashed line
        hold off
        xlabel('Time (s)');
        ylabel('Frequency (Hz)');
